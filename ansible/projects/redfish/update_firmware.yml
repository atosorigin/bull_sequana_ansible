---
- hosts: all
  connection: local
  name: Update tar BMC image
  gather_facts: False
  vars_files:
    - vars/external_vars.yml
    - vars/passwords.yml

  tasks:

  - name: validate file_to_upload variable
    assert:
      that:
        - file_to_upload is defined
      fail_msg: "The variable file_to_upload is NOT defined in inventory vars/external_vars.yml file (Ansible). See readme.md for more details."
      success_msg: "The variable file_to_upload is defined"
    run_once: true

  - name: validate file_to_upload variable
    assert:
      that:
        - taskmon_maxretries is defined
      fail_msg: "The variable taskmon_maxretries is NOT defined in inventory vars/external_vars.yml file (Ansible). See readme.md for more details."
      success_msg: "The variable taskmon_maxretries is defined"
    run_once: true

  - include_tasks: utils_create_token.yml

  - name: Set ApplyTime=OnReset
    uri:
      url: https://{{ baseuri }}/redfish/v1/UpdateService
      method: PATCH
      status_code: 200
      body: '{ "HttpPushUriOptions": { "HttpPushUriApplyTime": { "ApplyTime": "OnReset" } } }'
      validate_certs: no
      timeout: 60
      headers:
        Content-Type: "application/json"
        X-Auth-Token: "{{ x_token }}"
    register: result_ApplyTime

  - debug:
      var: result_ApplyTime
      verbosity: 2

  - name: Get HttpPushUri
    uri:
      url: https://{{ baseuri }}/redfish/v1/UpdateService
      method: GET
      validate_certs: no
      headers:
        X-Auth-Token: "{{ x_token }}"
    register: result_push_uri

  - debug:
      var: result_push_uri
      verbosity: 2

  - set_fact: 
      push_uri: "{{ result_push_uri.json.HttpPushUri }}"

# Upload can fail with ResourceAlreadyExists, InvalidUpload, etc.
  - name: Handle Upload error
    block:
      - name: Upload with ApplyTime=OnReset Firmware Image
        uri:
          url: https://{{ baseuri }}{{ push_uri }}
          src: "{{ file_to_upload }}"
          method: POST
          validate_certs: no
          timeout: "{{ post_timeout }}"
          status_code: 202
          headers:
            Content-Type: "application/octet-stream"
            X-Auth-Token: "{{ x_token }}"
        register: result_upload
    
    rescue:

    # error ocurred during Upload
      - name: Print that Upload error occurred
        debug:
          msg: "Error detected during Upload request"

      - name: print result_upload
        debug:
          var: result_upload

      - name: print result_upload.json
        debug:
          var: result_upload.json

      - name: extract MessageId and Message
        set_fact:
          MessageId: "{{ result_upload.json.error['@Message.ExtendedInfo'][0].MessageId }}"
          Message: "{{ result_upload.json.error['@Message.ExtendedInfo'][0].Message }}"

      - name: display MessageId
        debug:
          var: MessageId
      
      - name: Terminate the playbook
        fail:
          msg: "Upload failed with MessageId: {{ MessageId }}\nMessage: {{ Message }}"

  - debug:
      var: result_upload
      verbosity: 2

  - set_fact: 
      location: "{{ result_upload.location }}"

  - set_fact: 
      taskid: "{{ result_upload.json.Id }}"

  - set_fact: 
      task_location: "{{ result_upload.json['@odata.id'] }}"

  - set_fact: 
      taskstate: "{{ result_upload.json.TaskState }}"

  - set_fact: 
      taskstatus: "{{ result_upload.json.TaskStatus }}"
      
  - fail:
      msg: "task status error :{{ taskstatus }} "
    when: not taskstatus == "OK"

  - fail:
      msg: "task state error :{{ taskstate }} "
    when: not taskstate == "Running"

  - fail:
      msg: "task monitoring location not defined"
    when: not location is defined

  - name: Retry until task is Completed
    include_tasks: wait_until_task_completed.yml

  - name: Check task
    include_tasks: utils_task.yml

  - fail:
      msg: "no task response "
    when: not result_task.json is defined

  - set_fact: 
      taskstate: "{{ result_task.json.TaskState }}"

  - set_fact: 
      taskstatus: "{{ result_task.json.TaskStatus }}"
      
  - fail:
      msg: "task status error :{{ taskstatus }} "
    when: not taskstatus == "OK"

  - fail:
      msg: "task state error :{{ taskstate }} "
    when: not taskstate == "Completed"

  - name: Should reboot
    include_tasks: should_reboot.yml
    when: taskstate == "Completed" and taskstatus == "OK" and '"OMF_CEB" in file_to_upload'
